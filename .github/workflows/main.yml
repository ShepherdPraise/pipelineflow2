name: Overwrite pipelineflow2 from pipelineflow (Preserve History, Sync Submodules, Test & Lint)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  overwrite-sync:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
      - name: Set Commit SHA
        id: vars
        run: echo "sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Checkout pipelineflow2
        uses: actions/checkout@v4
        with:
          repository: ShepherdPraise/pipelineflow2
          token: ${{ secrets.PAT_TOKEN }}
          path: flow2
          fetch-depth: 0
          submodules: recursive

      - name: Checkout pipelineflow
        uses: actions/checkout@v4
        with:
          repository: ShepherdPraise/pipelineflow
          token: ${{ secrets.PAT_TOKEN }}
          path: flow1
          fetch-depth: 0
          submodules: recursive

      - name: Create sync branch
        working-directory: flow2
        run: |
          git checkout -b Flow2-overwrite-${{ steps.vars.outputs.sha }}

      - name: Replace pipelineflow2 contents with pipelineflow
        run: |
          rsync -av --delete --exclude='.git' flow1/ flow2/

      - name: File + submodule sanity checks
        working-directory: flow2
        run: |
          echo "🔍 Checking for essential files..."
          required=("package.json" "src" "public")
          for item in "${required[@]}"; do
            if [[ ! -e "$item" ]]; then
              echo "❌ Missing required item: $item"
              exit 1
            fi
          done
          echo "✅ Files look good."
          git submodule foreach --quiet 'git rev-parse --abbrev-ref HEAD || exit 1'
          echo "✅ Submodules OK."

      - name: Install dependencies
        working-directory: flow2
        run: |
          echo "📦 Installing React dependencies..."
          npm install --legacy-peer-deps

      - name: Run ESLint checks
        working-directory: flow2
        run: |
          echo "🧼 Running ESLint..."
          npx eslint . --ext .js,.jsx,.ts,.tsx

      - name: Build React project
        working-directory: flow2
        run: |
          echo "🏗️ Running build..."
          npm run build

      - name: Run React tests
        working-directory: flow2
        run: |
          echo "🧪 Running tests..."
          npm test -- --watchAll=false

      - name: Set Git identity
        working-directory: flow2
        run: |
          git config user.name "shepherdpraise"
          git config user.email "shepherd.praise@yahoo.com"

      - name: Commit changes (if any)
        working-directory: flow2
        run: |
          git add .
          git diff --cached --quiet && echo "No changes to commit" || git commit -m "Sync pipelineflow code + submodules – SHA ${{ steps.vars.outputs.sha }}"

      - name: Push sync branch
        working-directory: flow2
        run: |
          git push origin Flow2-overwrite-${{ steps.vars.outputs.sha }}

      - name: Check if branch has differences
        id: check_diff
        working-directory: flow2
        run: |
          git fetch origin main
          git diff --quiet origin/main...HEAD && echo "has_diff=false" >> $GITHUB_OUTPUT || echo "has_diff=true" >> $GITHUB_OUTPUT

      - name: Install GitHub CLI
        if: steps.check_diff.outputs.has_diff == 'true'
        run: |
          sudo apt update && sudo apt install -y gh

      - name: Authenticate GitHub CLI
        if: steps.check_diff.outputs.has_diff == 'true'
        run: |
          echo "${{ secrets.PAT_TOKEN }}" | gh auth login --with-token

      - name: Ensure PR label exists
        if: steps.check_diff.outputs.has_diff == 'true'
        run: |
          gh label create "automated-sync" \
            --repo ShepherdPraise/pipelineflow2 \
            --color "0366d6" \
            --description "PRs created by sync job" || echo "✅ Label already exists"

      - name: Create Pull Request
        if: steps.check_diff.outputs.has_diff == 'true'
        run: |
          gh pr create \
            --repo ShepherdPraise/pipelineflow2 \
            --title "Overwrite with pipelineflow code + submodules – SHA ${{ steps.vars.outputs.sha }}" \
            --body "This PR replaces pipelineflow2 code with that from pipelineflow, including submodules. SHA: ${{ steps.vars.outputs.sha }}" \
            --base main \
            --head Flow2-overwrite-${{ steps.vars.outputs.sha }} \
            --label "automated-sync"
